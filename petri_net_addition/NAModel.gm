/*
 * Following will be converted not depicted here are the PetriNet models
 * (PN1 + PN2) (PN1.p1/PN2.p1 -> p3)
 *
 * a = new :Addtion
 * pn1 = new PN(net_s: "pn1")
 * pn2 = new PN(net_s: "pn2")
 * a -:petrinets-> pn1
 * a -:petrinets-> pn2
 * f1 = :FusionNode(pn: pn1, item_s: "p1")
 * f2 = :FusionNode(pn: pn2, item_s: "p1")
 * f = :Fusion("p3")
 * f -:sources->f1
 * f -:sources->f2
 */

package net_addition {
    // we need the System-node to collect all the additions and put an order over them..
    // otherwise we have to detect the dependencies which is probably buggy
    node class System;

    directed edge class rules {
            order:int;
        }

    node class PN { // we need this because one petrinet can be referenced multiple times
        net: PetriNet;
        net_s: string = ""; // we might initialize it with a string which automatically finds the net
    }

    // directed edge class sourcenet
    //     connect PN[1] --> PetriNet[*];

    node class Addition {
        target: PN;
    }

    directed edge class petrinets
        connect Addition[1:*] --> PN;


    node class Fusion {
        rename: string;
    }
    directed edge class fusions
        connect Addition[1:*] --> Fusion;

    node class PetriNode {
        item: PetriNetNode;
        item_s: string = ""; // we might initialize it with a string which automatically finds the net
    }

    directed edge class sources
        connect Fusion[*] --> PetriNode;
    directed edge class pn_nodes
        connect PN[*] --> PetriNode;
    directed edge class configures {
        activates: boolean = true;
        weight: int = 1;
    }
}
